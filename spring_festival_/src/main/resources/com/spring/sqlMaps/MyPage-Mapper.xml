<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
    
<mapper namespace="MyPage-Mapper">

	<select id="reviewBoard" resultType="reviewTogether">
		select distinct rno "bno", r_title "title", to_date(to_char(r_regDate, 'yy-mm-dd')) "regDate", r_writer "writer", unq_id "unq_id"
		from brd_review
		where r_writer=#{str}
		order by rno desc
	</select>
	
	
	<select id="myReviewTotalCount" resultType="int">
		select distinct count(*)
		from brd_review
		where r_writer=#{str}
	</select>
<!-- //////////////////////////////////////////////////////////////////////////// -->
	<select id="togetherBoard" resultType="reviewTogether">
		select distinct tno "bno", t_title "title", to_date(to_char(t_regDate, 'yy-mm-dd')) "regDate", t_writer "writer", unq_id "unq_id"
		from brd_together
		where t_writer=#{str}
		order by tno desc		
	</select>
	<select id="myTogetherTotalCount" resultType="int">
		select distinct count(*)
		from brd_together
		where t_writer=#{str}
	</select>
	
	
<!-- ///////////////////////////////////////////////////////////////// -->
	<select id="reviewComments" resultType="int">
		select distinct count(*)
		from comments c
		where c.unq_id=${unq_id}
		and c.unq_id != 0
	</select>
	
	<select id="togetherComments" resultType="int">
		select distinct count(*)
		from comments c
		where c.unq_id=${unq_id}
		and c.unq_id != 0
	</select>
<!-- //////////////////////////////////////////////////////////////////////// -->
	<select id="commentsBoard" resultType="commentsBoard">
		select '축제' "category", c.unq_id "unq_id", bf.FNO "bno", bf.F_TITLE "title", c.C_CONTENT "comment", c.C_WRITER "writer", c.C_REGDATE "regDate"
		from comments c, brd_festival bf
		where c.C_WRITER = #{str}
		and c.UNQ_ID = bf.UNQ_ID
		
		union
		
		select '같이가요' "category", c.unq_id "unq_id", bt.tNO "bno", bt.T_TITLE "title", c.C_CONTENT "comment", c.C_WRITER "writer", c.C_REGDATE "regDate"
		from comments c, brd_together bt
		where c.C_WRITER = #{str}
		and c.UNQ_ID = bt.UNQ_ID
		
		union
		
		select '후기' "category", c.unq_id "unq_id", br.rNO "bno", br.r_TITLE "title", c.C_CONTENT "comment", c.C_WRITER "writer", c.C_REGDATE "regDate"
		from comments c, brd_review br
		where c.C_WRITER = #{str}
		and c.UNQ_ID = br.UNQ_ID
		order by "regDate" desc
	</select>
	
	<select id="commentsTotalCount" resultType="int">
		select distinct count(*)
		from (
			select '축제' "category", c.unq_id "unq_id", bf.FNO "bno", bf.F_TITLE "title", c.C_CONTENT "comment", c.C_WRITER "writer", c.C_REGDATE "regDate"
			from comments c, brd_festival bf
			where c.C_WRITER = #{str}
			and c.UNQ_ID = bf.UNQ_ID
			
			union
			
			select '같이가요' "category", c.unq_id "unq_id", bt.tNO "bno", bt.T_TITLE "title", c.C_CONTENT "comment", c.C_WRITER "writer", c.C_REGDATE "regDate"
			from comments c, brd_together bt
			where c.C_WRITER = #{str}
			and c.UNQ_ID = bt.UNQ_ID
			
			union
			
			select '후기' "category", c.unq_id "unq_id", br.rNO "bno", br.r_TITLE "title", c.C_CONTENT "comment", c.C_WRITER "writer", c.C_REGDATE "regDate"
			from comments c, brd_review br
			where c.C_WRITER = #{str}
			and c.UNQ_ID = br.UNQ_ID
			order by "regDate" desc
		)
	</select>



	<select id="holdingNoTagList" resultType="holding">
		select distinct bf.f_title "title", bf.fno "fno", m.id "id"
		from member m, organization og, brd_festival bf, hashtag hs
		where m.id = #{str}
		and m.id = og.id
		and og.id = bf.f_writer
		and bf.fno = hs.fno
        order by "title"
	</select>
	
	
	<select id="holdingTagList" resultType="str">
		select distinct hs.hashtag "hashTag"
		from member m, organization og, brd_festival bf, hashtag hs
		where m.id = #{str}
		and m.id = og.id
		and og.id = bf.f_writer
		and bf.fno = hs.fno
		and bf.f_title = #{str2}
	</select>
	
	



	<select id="holdingTotalCount" resultType="int">
		select count (*)
		from(
			select distinct bf.f_title "title"
			from member m, organization og, brd_festival bf, hashtag hs
			where m.id = #{str}
			and m.id = og.id
			and og.id = bf.f_writer
			and bf.fno = hs.fno
		)
	</select>


	<select id="holdingCommentsCount" resultType="int">
		select distinct count(*)
		from brd_festival bf, comments c
		where bf.unq_id = #{unq_id}
		and bf.unq_id = c.unq_id
		and bf.F_WRITER = #{id}
	</select>
	
	
	
	
	<!-- 모든 멤버들에 대한 권한 관련 정보들을 조회한다. -->
	<!-- member(id), has_authority(id), blackList(id) -->
	<select id="memAuthSet" resultType="authSet">
		select m.id "id", m.email "email", m.nickName "nickName", m.name "name", ha.auth_no "auth_no", au.authority "auth"
		from member m, has_authority ha, authority au
		where m.id = ha.id
		and ha.auth_no = au.auth_no
	</select>
	
	
	
	<select id="authSetTotalCount" resultType="int">
		select count(*)
		from (
			select m.id , ha.id, ha.auth_no, au.authority
			from member m, has_authority ha, authority au
			where m.id = ha.id
			and ha.auth_no = au.auth_no
		)
	</select>
	
	
	<!-- 모든 회원들 중, 권한번호가 1(제재회원)에 해당하는 회원은 제재 기간을 조회한다. -->
	<select id="blackListPeriod" resultType="int">
			select distinct (bl.BK_ENDDATE - bl.BK_STARTDATE) "제재기간"
			from member m, has_authority ha, authority au, blackList bl
			where m.id = #{str2}
			and m.id = ha.id
			and ha.auth_no = au.auth_no
			and ha.auth_no = 1
			and ha.id = bl.id
	</select>
	
	
	
	
	<update id="authUpdate">
		update HAS_AUTHORITY
		set auth_no = #{auNo}
		where id = (select hs.id
		from member m, has_authority hs
		where m.id = hs.id
		and hs.id = #{mem})
	</update>
	
	<update id="authUpdate2">
		delete from blacklist
		where id=#{mem}
	</update>
	<update id="authUpdate3">
		insert into blacklist
		values(#{mem}, to_date(to_char(sysdate, 'yy-mm-dd')), sysdate+${period}, 'memo')
	</update>



	<select id="MemSearch" resultType="memSearch">
		select m.id "id", m.name "name", m.sex "gender", m.nickName "nName", m.tel "tel", m.email "email", au.AUTHORITY "auth"
		from member m, has_authority hs, authority au
		where m.id like '%${str2}%'
		and m.id = hs.id
		and hs.auth_no = au.auth_no
	</select>
</mapper>
    
    
    
    
    
    
    
    
    
    
    